{"id":"../node_modules/preact-habitat/dist/preact-habitat.es.js","dependencies":[{"name":"/Users/ma20195/Desktop/lab/responsive-preview/package.json","includedInParent":true,"mtime":1553158678241},{"name":"/Users/ma20195/Desktop/lab/responsive-preview/.babelrc","includedInParent":true,"mtime":1553158651739},{"name":"/Users/ma20195/Desktop/lab/responsive-preview/node_modules/preact-habitat/package.json","includedInParent":true,"mtime":1553153975727},{"name":"/Users/ma20195/Desktop/lab/responsive-preview/node_modules/preact-habitat/.babelrc","includedInParent":true,"mtime":499162500000},{"name":"preact","loc":{"line":1,"column":19},"parent":"/Users/ma20195/Desktop/lab/responsive-preview/node_modules/preact-habitat/dist/preact-habitat.es.js","resolved":"/Users/ma20195/Desktop/lab/responsive-preview/node_modules/preact/dist/preact.mjs"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _preact = _interopRequireDefault(require(\"preact\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\r\n * Removes `-` fron a string and capetalize the letter after\r\n * example: data-props-hello-world =>  dataPropsHelloWorld\r\n * Used for props passed from host DOM element\r\n * @param  {String} str string\r\n * @return {String} Capetalized string\r\n */\nvar camelcasize = function (str) {\n  return str.replace(/-([a-z])/gi, function (all, letter) {\n    return letter.toUpperCase();\n  });\n};\n/**\r\n * [getExecutedScript internal widget to provide the currently executed script]\r\n * @param  {document} document [Browser document object]\r\n * @return {HTMLElement}     [script Element]\r\n */\n\n\nvar getExecutedScript = function () {\n  return document.currentScript || function () {\n    var scripts = document.getElementsByTagName(\"script\");\n    return scripts[scripts.length - 1];\n  }();\n};\n/**\r\n * Get the props from a host element's data attributes\r\n * @param  {Element} tag The host element\r\n * @return {Object}  props object to be passed to the component\r\n */\n\n\nvar collectPropsFromElement = function (element, defaultProps) {\n  if (defaultProps === void 0) defaultProps = {};\n  var attrs = element.attributes;\n  var props = Object.assign({}, defaultProps); // collect from element\n\n  Object.keys(attrs).forEach(function (key) {\n    if (attrs.hasOwnProperty(key)) {\n      var dataAttrName = attrs[key].name;\n\n      if (!dataAttrName || typeof dataAttrName !== \"string\") {\n        return false;\n      }\n\n      var propName = dataAttrName.split(/(data-props?-)/).pop() || '';\n      propName = camelcasize(propName);\n\n      if (dataAttrName !== propName) {\n        var propValue = attrs[key].nodeValue;\n        props[propName] = propValue;\n      }\n    }\n  }); // check for child script text/props\n\n  [].forEach.call(element.getElementsByTagName('script'), function (scrp) {\n    var propsObj = {};\n\n    if (scrp.hasAttribute('type')) {\n      if (scrp.getAttribute('type') !== 'text/props') {\n        return;\n      }\n\n      try {\n        propsObj = JSON.parse(scrp.innerHTML);\n      } catch (e) {\n        throw new Error(e);\n      }\n\n      Object.assign(props, propsObj);\n    }\n  });\n  return props;\n};\n\nvar getHabitatSelectorFromClient = function (currentScript) {\n  var scriptTagAttrs = currentScript.attributes;\n  var selector = null; // check for another props attached to the tag\n\n  Object.keys(scriptTagAttrs).forEach(function (key) {\n    if (scriptTagAttrs.hasOwnProperty(key)) {\n      var dataAttrName = scriptTagAttrs[key].name;\n\n      if (dataAttrName === 'data-mount-in') {\n        selector = scriptTagAttrs[key].nodeValue;\n      }\n    }\n  });\n  return selector;\n};\n/**\r\n * Return array of 0 or more elements that will host our widget\r\n * @param  {id} attrId the data widget id attribute the host should have\r\n * @param  {document} scope  Docuemnt object or DOM Element as a scope\r\n * @return {Array}        Array of matching habitats\r\n */\n\n\nvar widgetDOMHostElements = function (ref) {\n  var selector = ref.selector;\n  var inline = ref.inline;\n  var clientSpecified = ref.clientSpecified;\n  var hostNodes = [];\n  var currentScript = getExecutedScript();\n\n  if (inline === true) {\n    var parentNode = currentScript.parentNode;\n    hostNodes.push(parentNode);\n  }\n\n  if (clientSpecified === true && !selector) {\n    // user did not specify where to mount - get it from script tag attributes\n    selector = getHabitatSelectorFromClient(currentScript);\n  }\n\n  if (selector) {\n    [].forEach.call(document.querySelectorAll(selector), function (queriedTag) {\n      hostNodes.push(queriedTag);\n    });\n  }\n\n  return hostNodes;\n};\n/**\r\n * preact render function that will be queued if the DOM is not ready\r\n * and executed immeidatly if DOM is ready\r\n */\n\n\nvar preactRender = function (widget, hostElements, root, cleanRoot, defaultProps) {\n  hostElements.forEach(function (elm) {\n    var hostNode = elm;\n\n    if (hostNode._habitat) {\n      return;\n    }\n\n    hostNode._habitat = true;\n    var props = collectPropsFromElement(elm, defaultProps) || defaultProps;\n\n    if (cleanRoot) {\n      hostNode.innerHTML = \"\";\n    }\n\n    return _preact.default.render(_preact.default.h(widget, props), hostNode, root);\n  });\n};\n\nvar habitat = function (Widget) {\n  // Widget represents the Preact component we need to mount\n  var widget = Widget; // preact root render helper\n\n  var root = null;\n\n  var render = function (ref) {\n    if (ref === void 0) ref = {};\n    var selector = ref.selector;\n    if (selector === void 0) selector = null;\n    var inline = ref.inline;\n    if (inline === void 0) inline = false;\n    var clean = ref.clean;\n    if (clean === void 0) clean = false;\n    var clientSpecified = ref.clientSpecified;\n    if (clientSpecified === void 0) clientSpecified = false;\n    var defaultProps = ref.defaultProps;\n    if (defaultProps === void 0) defaultProps = {};\n    var elements = widgetDOMHostElements({\n      selector: selector,\n      inline: inline,\n      clientSpecified: clientSpecified\n    });\n\n    var loaded = function () {\n      if (elements.length > 0) {\n        var elements$1 = widgetDOMHostElements({\n          selector: selector,\n          inline: inline,\n          clientSpecified: clientSpecified\n        });\n        return preactRender(widget, elements$1, root, clean, defaultProps);\n      }\n    };\n\n    loaded();\n    document.addEventListener(\"DOMContentLoaded\", loaded);\n    document.addEventListener(\"load\", loaded);\n  };\n\n  return {\n    render: render\n  };\n};\n\nvar _default = habitat; //# sourceMappingURL=preact-habitat.es.js.map\n\nexports.default = _default;"},"sourceMaps":null,"error":null,"hash":"eadea7990ff6f64ecf97d9943617517c","cacheData":{"env":{}}}