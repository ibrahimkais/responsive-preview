'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _raf = require('raf');

var _raf2 = _interopRequireDefault(_raf);

var _domCss = require('dom-css');

var _domCss2 = _interopRequireDefault(_domCss);

var _preact = require('preact');

var _isString = require('../utils/isString');

var _isString2 = _interopRequireDefault(_isString);

var _getScrollbarWidth = require('../utils/getScrollbarWidth');

var _getScrollbarWidth2 = _interopRequireDefault(_getScrollbarWidth);

var _returnFalse = require('../utils/returnFalse');

var _returnFalse2 = _interopRequireDefault(_returnFalse);

var _getInnerWidth = require('../utils/getInnerWidth');

var _getInnerWidth2 = _interopRequireDefault(_getInnerWidth);

var _getInnerHeight = require('../utils/getInnerHeight');

var _getInnerHeight2 = _interopRequireDefault(_getInnerHeight);

var _styles = require('./styles');

var _defaultRenderElements = require('./defaultRenderElements');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Scrollbars = function (_Component) {
  _inherits(Scrollbars, _Component);

  function Scrollbars() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Scrollbars);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Scrollbars.__proto__ || Object.getPrototypeOf(Scrollbars)).call.apply(_ref, [this].concat(args))), _this), _this.refs = {}, _this.state = {
      didMountUniversal: false
    }, _this.componentDidMount = function () {
      _this.addListeners();
      _this.update();
      _this.componentDidMountUniversal();
    }, _this.componentDidUpdate = function () {
      _this.update();
    }, _this.componentWillUnmount = function () {
      _this.unsetDomStyles();
      _this.removeListeners();
      (0, _raf.cancel)(_this.requestFrame);
      clearTimeout(_this.hideTracksTimeout);
      clearInterval(_this.detectScrollingInterval);
    }, _this.getScrollLeft = function () {
      var view = _this.refs.view;

      return view.scrollLeft;
    }, _this.getScrollTop = function () {
      var view = _this.refs.view;

      return view.scrollTop;
    }, _this.getScrollWidth = function () {
      var view = _this.refs.view;

      return view.scrollWidth;
    }, _this.getScrollHeight = function () {
      var view = _this.refs.view;

      return view.scrollHeight;
    }, _this.getClientWidth = function () {
      var view = _this.refs.view;

      return view.clientWidth;
    }, _this.getClientHeight = function () {
      var view = _this.refs.view;

      return view.clientHeight;
    }, _this.getValues = function () {
      var view = _this.refs.view;
      var scrollLeft = view.scrollLeft,
          scrollTop = view.scrollTop,
          scrollWidth = view.scrollWidth,
          scrollHeight = view.scrollHeight,
          clientWidth = view.clientWidth,
          clientHeight = view.clientHeight;


      return {
        left: scrollLeft / (scrollWidth - clientWidth) || 0,
        top: scrollTop / (scrollHeight - clientHeight) || 0,
        scrollLeft: scrollLeft,
        scrollTop: scrollTop,
        scrollWidth: scrollWidth,
        scrollHeight: scrollHeight,
        clientWidth: clientWidth,
        clientHeight: clientHeight
      };
    }, _this.getThumbHorizontalWidth = function () {
      var _this$props = _this.props,
          thumbSize = _this$props.thumbSize,
          thumbMinSize = _this$props.thumbMinSize;
      var _this$refs = _this.refs,
          view = _this$refs.view,
          trackHorizontal = _this$refs.trackHorizontal;
      var scrollWidth = view.scrollWidth,
          clientWidth = view.clientWidth;

      var trackWidth = (0, _getInnerWidth2["default"])(trackHorizontal);
      var width = Math.ceil(clientWidth / scrollWidth * trackWidth);
      if (trackWidth === width) return 0;
      if (thumbSize) return thumbSize;
      return Math.max(width, thumbMinSize);
    }, _this.getThumbVerticalHeight = function () {
      var _this$props2 = _this.props,
          thumbSize = _this$props2.thumbSize,
          thumbMinSize = _this$props2.thumbMinSize;
      var _this$refs2 = _this.refs,
          view = _this$refs2.view,
          trackVertical = _this$refs2.trackVertical;
      var scrollHeight = view.scrollHeight,
          clientHeight = view.clientHeight;

      var trackHeight = (0, _getInnerHeight2["default"])(trackVertical);
      var height = Math.ceil(clientHeight / scrollHeight * trackHeight);
      if (trackHeight === height) return 0;
      if (thumbSize) return thumbSize;
      return Math.max(height, thumbMinSize);
    }, _this.getScrollLeftForOffset = function (offset) {
      var _this$refs3 = _this.refs,
          view = _this$refs3.view,
          trackHorizontal = _this$refs3.trackHorizontal;
      var scrollWidth = view.scrollWidth,
          clientWidth = view.clientWidth;

      var trackWidth = (0, _getInnerWidth2["default"])(trackHorizontal);
      var thumbWidth = _this.getThumbHorizontalWidth();
      return offset / (trackWidth - thumbWidth) * (scrollWidth - clientWidth);
    }, _this.getScrollTopForOffset = function (offset) {
      var _this$refs4 = _this.refs,
          view = _this$refs4.view,
          trackVertical = _this$refs4.trackVertical;
      var scrollHeight = view.scrollHeight,
          clientHeight = view.clientHeight;

      var trackHeight = (0, _getInnerHeight2["default"])(trackVertical);
      var thumbHeight = _this.getThumbVerticalHeight();
      return offset / (trackHeight - thumbHeight) * (scrollHeight - clientHeight);
    }, _this.scrollLeft = function () {
      var left = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var view = _this.refs.view;

      view.scrollLeft = left;
    }, _this.scrollTop = function () {
      var top = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var view = _this.refs.view;

      view.scrollTop = top;
    }, _this.scrollToLeft = function () {
      var view = _this.refs.view;

      view.scrollLeft = 0;
    }, _this.scrollToTop = function () {
      var view = _this.refs.view;

      view.scrollTop = 0;
    }, _this.scrollToRight = function () {
      var view = _this.refs.view;

      view.scrollLeft = view.scrollWidth;
    }, _this.scrollToBottom = function () {
      var view = _this.refs.view;

      view.scrollTop = view.scrollHeight;
    }, _this.addListeners = function () {
      /* istanbul ignore if */
      if (typeof document === 'undefined') return;
      var _this$refs5 = _this.refs,
          view = _this$refs5.view,
          trackHorizontal = _this$refs5.trackHorizontal,
          trackVertical = _this$refs5.trackVertical,
          thumbHorizontal = _this$refs5.thumbHorizontal,
          thumbVertical = _this$refs5.thumbVertical;

      view.addEventListener('scroll', _this.handleScroll);
      if (!(0, _getScrollbarWidth2["default"])()) return;
      trackHorizontal.addEventListener('mouseenter', _this.handleTrackMouseEnter);
      trackHorizontal.addEventListener('mouseleave', _this.handleTrackMouseLeave);
      trackHorizontal.addEventListener('mousedown', _this.handleHorizontalTrackMouseDown);
      trackVertical.addEventListener('mouseenter', _this.handleTrackMouseEnter);
      trackVertical.addEventListener('mouseleave', _this.handleTrackMouseLeave);
      trackVertical.addEventListener('mousedown', _this.handleVerticalTrackMouseDown);
      thumbHorizontal.addEventListener('mousedown', _this.handleHorizontalThumbMouseDown);
      thumbVertical.addEventListener('mousedown', _this.handleVerticalThumbMouseDown);
      window.addEventListener('resize', _this.handleWindowResize);
    }, _this.removeListeners = function () {
      /* istanbul ignore if */
      if (typeof document === 'undefined') return;
      var _this$refs6 = _this.refs,
          view = _this$refs6.view,
          trackHorizontal = _this$refs6.trackHorizontal,
          trackVertical = _this$refs6.trackVertical,
          thumbHorizontal = _this$refs6.thumbHorizontal,
          thumbVertical = _this$refs6.thumbVertical;

      view.removeEventListener('scroll', _this.handleScroll);
      if (!(0, _getScrollbarWidth2["default"])()) return;
      trackHorizontal.removeEventListener('mouseenter', _this.handleTrackMouseEnter);
      trackHorizontal.removeEventListener('mouseleave', _this.handleTrackMouseLeave);
      trackHorizontal.removeEventListener('mousedown', _this.handleHorizontalTrackMouseDown);
      trackVertical.removeEventListener('mouseenter', _this.handleTrackMouseEnter);
      trackVertical.removeEventListener('mouseleave', _this.handleTrackMouseLeave);
      trackVertical.removeEventListener('mousedown', _this.handleVerticalTrackMouseDown);
      thumbHorizontal.removeEventListener('mousedown', _this.handleHorizontalThumbMouseDown);
      thumbVertical.removeEventListener('mousedown', _this.handleVerticalThumbMouseDown);
      window.removeEventListener('resize', _this.handleWindowResize);
      // Possibly setup by `handleDragStart`
      _this.teardownDragging();
    }, _this.handleScroll = function (event) {
      var _this$props3 = _this.props,
          onScroll = _this$props3.onScroll,
          onScrollFrame = _this$props3.onScrollFrame;

      if (onScroll) onScroll(event);
      _this.update(function (values) {
        var scrollLeft = values.scrollLeft,
            scrollTop = values.scrollTop;

        _this.viewScrollLeft = scrollLeft;
        _this.viewScrollTop = scrollTop;
        if (onScrollFrame) onScrollFrame(values);
      });
      _this.detectScrolling();
    }, _this.handleScrollStart = function () {
      var onScrollStart = _this.props.onScrollStart;

      if (onScrollStart) onScrollStart();
      _this.handleScrollStartAutoHide();
    }, _this.handleScrollStartAutoHide = function () {
      var autoHide = _this.props.autoHide;

      if (!autoHide) return;
      _this.showTracks();
    }, _this.handleScrollStop = function () {
      var onScrollStop = _this.props.onScrollStop;

      if (onScrollStop) onScrollStop();
      _this.handleScrollStopAutoHide();
    }, _this.handleScrollStopAutoHide = function () {
      var autoHide = _this.props.autoHide;

      if (!autoHide) return;
      _this.hideTracks();
    }, _this.handleWindowResize = function () {
      _this.update();
    }, _this.handleHorizontalTrackMouseDown = function (event) {
      event.preventDefault();
      var view = _this.refs.view;
      var target = event.target,
          clientX = event.clientX;

      var _target$getBoundingCl = target.getBoundingClientRect(),
          targetLeft = _target$getBoundingCl.left;

      var thumbWidth = _this.getThumbHorizontalWidth();
      var offset = Math.abs(targetLeft - clientX) - thumbWidth / 2;
      view.scrollLeft = _this.getScrollLeftForOffset(offset);
    }, _this.handleVerticalTrackMouseDown = function (event) {
      event.preventDefault();
      var view = _this.refs.view;
      var target = event.target,
          clientY = event.clientY;

      var _target$getBoundingCl2 = target.getBoundingClientRect(),
          targetTop = _target$getBoundingCl2.top;

      var thumbHeight = _this.getThumbVerticalHeight();
      var offset = Math.abs(targetTop - clientY) - thumbHeight / 2;
      view.scrollTop = _this.getScrollTopForOffset(offset);
    }, _this.handleHorizontalThumbMouseDown = function (event) {
      event.preventDefault();
      _this.handleDragStart(event);
      var target = event.target,
          clientX = event.clientX;
      var offsetWidth = target.offsetWidth;

      var _target$getBoundingCl3 = target.getBoundingClientRect(),
          left = _target$getBoundingCl3.left;

      _this.prevPageX = offsetWidth - (clientX - left);
    }, _this.handleVerticalThumbMouseDown = function (event) {
      event.preventDefault();
      _this.handleDragStart(event);
      var target = event.target,
          clientY = event.clientY;
      var offsetHeight = target.offsetHeight;

      var _target$getBoundingCl4 = target.getBoundingClientRect(),
          top = _target$getBoundingCl4.top;

      _this.prevPageY = offsetHeight - (clientY - top);
    }, _this.setupDragging = function () {
      (0, _domCss2["default"])(document.body, _styles.disableSelectStyle);
      document.addEventListener('mousemove', _this.handleDrag);
      document.addEventListener('mouseup', _this.handleDragEnd);
      document.onselectstart = _returnFalse2["default"];
    }, _this.teardownDragging = function () {
      (0, _domCss2["default"])(document.body, _styles.disableSelectStyleReset);
      document.removeEventListener('mousemove', _this.handleDrag);
      document.removeEventListener('mouseup', _this.handleDragEnd);
      document.onselectstart = undefined;
    }, _this.handleDragStart = function (event) {
      _this.dragging = true;
      event.stopImmediatePropagation();
      _this.setupDragging();
    }, _this.handleDrag = function (event) {
      if (_this.prevPageX) {
        var clientX = event.clientX;
        var _this$refs7 = _this.refs,
            view = _this$refs7.view,
            trackHorizontal = _this$refs7.trackHorizontal;

        var _trackHorizontal$getB = trackHorizontal.getBoundingClientRect(),
            trackLeft = _trackHorizontal$getB.left;

        var thumbWidth = _this.getThumbHorizontalWidth();
        var clickPosition = thumbWidth - _this.prevPageX;
        var offset = -trackLeft + clientX - clickPosition;
        view.scrollLeft = _this.getScrollLeftForOffset(offset);
      }
      if (_this.prevPageY) {
        var clientY = event.clientY;
        var _this$refs8 = _this.refs,
            _view = _this$refs8.view,
            trackVertical = _this$refs8.trackVertical;

        var _trackVertical$getBou = trackVertical.getBoundingClientRect(),
            trackTop = _trackVertical$getBou.top;

        var thumbHeight = _this.getThumbVerticalHeight();
        var _clickPosition = thumbHeight - _this.prevPageY;
        var _offset = -trackTop + clientY - _clickPosition;
        _view.scrollTop = _this.getScrollTopForOffset(_offset);
      }
      return false;
    }, _this.handleDragEnd = function () {
      _this.dragging = false;
      _this.prevPageX = _this.prevPageY = 0;
      _this.teardownDragging();
      _this.handleDragEndAutoHide();
    }, _this.handleDragEndAutoHide = function () {
      var autoHide = _this.props.autoHide;

      if (!autoHide) return;
      _this.hideTracks();
    }, _this.handleTrackMouseEnter = function () {
      _this.trackMouseOver = true;
      _this.handleTrackMouseEnterAutoHide();
    }, _this.handleTrackMouseEnterAutoHide = function () {
      var autoHide = _this.props.autoHide;

      if (!autoHide) return;
      _this.showTracks();
    }, _this.handleTrackMouseLeave = function () {
      _this.trackMouseOver = false;
      _this.handleTrackMouseLeaveAutoHide();
    }, _this.handleTrackMouseLeaveAutoHide = function () {
      var autoHide = _this.props.autoHide;

      if (!autoHide) return;
      _this.hideTracks();
    }, _this.showTracks = function () {
      var _this$refs9 = _this.refs,
          trackHorizontal = _this$refs9.trackHorizontal,
          trackVertical = _this$refs9.trackVertical;

      clearTimeout(_this.hideTracksTimeout);
      (0, _domCss2["default"])(trackHorizontal, { opacity: 1 });
      (0, _domCss2["default"])(trackVertical, { opacity: 1 });
    }, _this.hideTracks = function () {
      if (_this.dragging) return;
      if (_this.scrolling) return;
      if (_this.trackMouseOver) return;
      var autoHideTimeout = _this.props.autoHideTimeout;
      var _this$refs10 = _this.refs,
          trackHorizontal = _this$refs10.trackHorizontal,
          trackVertical = _this$refs10.trackVertical;

      clearTimeout(_this.hideTracksTimeout);
      _this.hideTracksTimeout = setTimeout(function () {
        (0, _domCss2["default"])(trackHorizontal, { opacity: 0 });
        (0, _domCss2["default"])(trackVertical, { opacity: 0 });
      }, autoHideTimeout);
    }, _this.detectScrolling = function () {
      if (_this.scrolling) return;
      _this.scrolling = true;
      _this.handleScrollStart();
      _this.detectScrollingInterval = setInterval(function () {
        if (_this.lastViewScrollLeft === _this.viewScrollLeft && _this.lastViewScrollTop === _this.viewScrollTop) {
          clearInterval(_this.detectScrollingInterval);
          _this.scrolling = false;
          _this.handleScrollStop();
        }
        _this.lastViewScrollLeft = _this.viewScrollLeft;
        _this.lastViewScrollTop = _this.viewScrollTop;
      }, 100);
    }, _this.raf = function (callback) {
      if (_this.requestFrame) _raf2["default"].cancel(_this.requestFrame);
      _this.requestFrame = (0, _raf2["default"])(function () {
        _this.requestFrame = undefined;
        callback();
      });
    }, _this.update = function (callback) {
      _this.raf(function () {
        return _this._update(callback);
      });
    }, _this._update = function (callback) {
      var _this$props4 = _this.props,
          onUpdate = _this$props4.onUpdate,
          hideTracksWhenNotNeeded = _this$props4.hideTracksWhenNotNeeded;

      var values = _this.getValues();
      if ((0, _getScrollbarWidth2["default"])()) {
        var _this$refs11 = _this.refs,
            thumbHorizontal = _this$refs11.thumbHorizontal,
            thumbVertical = _this$refs11.thumbVertical,
            trackHorizontal = _this$refs11.trackHorizontal,
            trackVertical = _this$refs11.trackVertical;
        var scrollLeft = values.scrollLeft,
            clientWidth = values.clientWidth,
            scrollWidth = values.scrollWidth;

        var trackHorizontalWidth = (0, _getInnerWidth2["default"])(trackHorizontal);
        var thumbHorizontalWidth = _this.getThumbHorizontalWidth();
        var thumbHorizontalX = scrollLeft / (scrollWidth - clientWidth) * (trackHorizontalWidth - thumbHorizontalWidth);
        var thumbHorizontalStyle = {
          width: thumbHorizontalWidth,
          transform: 'translateX(' + thumbHorizontalX + 'px)'
        };
        var scrollTop = values.scrollTop,
            clientHeight = values.clientHeight,
            scrollHeight = values.scrollHeight;

        var trackVerticalHeight = (0, _getInnerHeight2["default"])(trackVertical);
        var thumbVerticalHeight = _this.getThumbVerticalHeight();
        var thumbVerticalY = scrollTop / (scrollHeight - clientHeight) * (trackVerticalHeight - thumbVerticalHeight);
        var thumbVerticalStyle = {
          height: thumbVerticalHeight,
          transform: 'translateY(' + thumbVerticalY + 'px)'
        };
        if (hideTracksWhenNotNeeded) {
          var trackHorizontalStyle = {
            visibility: scrollWidth > clientWidth ? 'visible' : 'hidden'
          };
          var trackVerticalStyle = {
            visibility: scrollHeight > clientHeight ? 'visible' : 'hidden'
          };
          (0, _domCss2["default"])(trackHorizontal, trackHorizontalStyle);
          (0, _domCss2["default"])(trackVertical, trackVerticalStyle);
        }
        (0, _domCss2["default"])(thumbHorizontal, thumbHorizontalStyle);
        (0, _domCss2["default"])(thumbVertical, thumbVerticalStyle);
      }
      if (onUpdate) onUpdate(values);
      if (typeof callback !== 'function') return;
      callback(values);
    }, _this.render = function () {
      var scrollbarWidth = (0, _getScrollbarWidth2["default"])();
      /* eslint-disable no-unused-vars */

      var _this$props5 = _this.props,
          onScroll = _this$props5.onScroll,
          onScrollFrame = _this$props5.onScrollFrame,
          onScrollStart = _this$props5.onScrollStart,
          onScrollStop = _this$props5.onScrollStop,
          onUpdate = _this$props5.onUpdate,
          renderView = _this$props5.renderView,
          renderTrackHorizontal = _this$props5.renderTrackHorizontal,
          renderTrackVertical = _this$props5.renderTrackVertical,
          renderThumbHorizontal = _this$props5.renderThumbHorizontal,
          renderThumbVertical = _this$props5.renderThumbVertical,
          tagName = _this$props5.tagName,
          hideTracksWhenNotNeeded = _this$props5.hideTracksWhenNotNeeded,
          autoHide = _this$props5.autoHide,
          autoHideTimeout = _this$props5.autoHideTimeout,
          autoHideDuration = _this$props5.autoHideDuration,
          thumbSize = _this$props5.thumbSize,
          thumbMinSize = _this$props5.thumbMinSize,
          universal = _this$props5.universal,
          autoHeight = _this$props5.autoHeight,
          autoHeightMin = _this$props5.autoHeightMin,
          autoHeightMax = _this$props5.autoHeightMax,
          style = _this$props5.style,
          children = _this$props5.children,
          props = _objectWithoutProperties(_this$props5, ['onScroll', 'onScrollFrame', 'onScrollStart', 'onScrollStop', 'onUpdate', 'renderView', 'renderTrackHorizontal', 'renderTrackVertical', 'renderThumbHorizontal', 'renderThumbVertical', 'tagName', 'hideTracksWhenNotNeeded', 'autoHide', 'autoHideTimeout', 'autoHideDuration', 'thumbSize', 'thumbMinSize', 'universal', 'autoHeight', 'autoHeightMin', 'autoHeightMax', 'style', 'children']);
      /* eslint-enable no-unused-vars */

      var didMountUniversal = _this.state.didMountUniversal;


      var containerStyle = _extends({}, _styles.containerStyleDefault, autoHeight && _extends({}, _styles.containerStyleAutoHeight, {
        minHeight: autoHeightMin,
        maxHeight: autoHeightMax
      }), style);

      var viewStyle = _extends({}, _styles.viewStyleDefault, {
        // Hide scrollbars by setting a negative margin
        marginRight: scrollbarWidth ? -scrollbarWidth : 0,
        marginBottom: scrollbarWidth ? -scrollbarWidth : 0
      }, autoHeight && _extends({}, _styles.viewStyleAutoHeight, {
        // Add scrollbarWidth to autoHeight in order to compensate negative margins
        minHeight: (0, _isString2["default"])(autoHeightMin) ? 'calc(' + autoHeightMin + ' + ' + scrollbarWidth + 'px)' : autoHeightMin + scrollbarWidth,
        maxHeight: (0, _isString2["default"])(autoHeightMax) ? 'calc(' + autoHeightMax + ' + ' + scrollbarWidth + 'px)' : autoHeightMax + scrollbarWidth
      }), autoHeight && universal && !didMountUniversal && {
        minHeight: autoHeightMin,
        maxHeight: autoHeightMax
      }, universal && !didMountUniversal && _styles.viewStyleUniversalInitial);

      var trackAutoHeightStyle = {
        transition: 'opacity ' + autoHideDuration + 'ms',
        opacity: 0
      };

      var trackHorizontalStyle = _extends({}, _styles.trackHorizontalStyleDefault, autoHide && trackAutoHeightStyle, (!scrollbarWidth || universal && !didMountUniversal) && {
        display: 'none'
      });

      var trackVerticalStyle = _extends({}, _styles.trackVerticalStyleDefault, autoHide && trackAutoHeightStyle, (!scrollbarWidth || universal && !didMountUniversal) && {
        display: 'none'
      });

      return (0, _preact.h)(tagName, _extends({}, props, { style: containerStyle, ref: function ref(r) {
          _this.refs.container = r;
        } }), [(0, _preact.cloneElement)(renderView({ style: viewStyle }), { key: 'view', ref: function ref(r) {
          _this.refs.view = r;
        } }, children), (0, _preact.cloneElement)(renderTrackHorizontal({ style: trackHorizontalStyle }), { key: 'trackHorizontal', ref: function ref(r) {
          _this.refs.trackHorizontal = r;
        } }, (0, _preact.cloneElement)(renderThumbHorizontal({ style: _styles.thumbHorizontalStyleDefault }), { ref: function ref(r) {
          _this.refs.thumbHorizontal = r;
        } })), (0, _preact.cloneElement)(renderTrackVertical({ style: trackVerticalStyle }), { key: 'trackVertical', ref: function ref(r) {
          _this.refs.trackVertical = r;
        } }, (0, _preact.cloneElement)(renderThumbVertical({ style: _styles.thumbVerticalStyleDefault }), { ref: function ref(r) {
          _this.refs.thumbVertical = r;
        } }))]);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Scrollbars, [{
    key: 'componentDidMountUniversal',
    value: function componentDidMountUniversal() {
      // eslint-disable-line react/sort-comp
      var universal = this.props.universal;

      if (!universal) return;
      this.setState({ didMountUniversal: true });
    }
  }, {
    key: 'unsetDomStyles',
    value: function unsetDomStyles() {
      var _refs = this.refs,
          thumbHorizontal = _refs.thumbHorizontal,
          thumbVertical = _refs.thumbVertical,
          trackHorizontal = _refs.trackHorizontal,
          trackVertical = _refs.trackVertical;

      var stylesReset = {
        width: '',
        height: '',
        transform: '',
        opacity: '',
        visibility: ''
      };
      (0, _domCss2["default"])(thumbVertical, stylesReset);
      (0, _domCss2["default"])(thumbHorizontal, stylesReset);
      (0, _domCss2["default"])(trackVertical, stylesReset);
      (0, _domCss2["default"])(trackHorizontal, stylesReset);
    }
  }]);

  return Scrollbars;
}(_preact.Component);

Scrollbars.defaultProps = {
  renderView: _defaultRenderElements.renderViewDefault,
  renderTrackHorizontal: _defaultRenderElements.renderTrackHorizontalDefault,
  renderTrackVertical: _defaultRenderElements.renderTrackVerticalDefault,
  renderThumbHorizontal: _defaultRenderElements.renderThumbHorizontalDefault,
  renderThumbVertical: _defaultRenderElements.renderThumbVerticalDefault,
  tagName: 'div',
  thumbMinSize: 30,
  hideTracksWhenNotNeeded: false,
  autoHide: false,
  autoHideTimeout: 1000,
  autoHideDuration: 200,
  autoHeight: false,
  autoHeightMin: 0,
  autoHeightMax: 200,
  universal: false
};
exports["default"] = Scrollbars;