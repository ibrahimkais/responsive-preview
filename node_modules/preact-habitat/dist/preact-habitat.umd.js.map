{"version":3,"sources":["../src/lib.js","../src/index.js"],"names":["const","camelcasize","str","replace","all","letter","toUpperCase","getExecutedScript","document","currentScript","let","scripts","getElementsByTagName","length","collectPropsFromElement","element","defaultProps","attrs","attributes","props","Object","assign","keys","forEach","key","hasOwnProperty","dataAttrName","name","propName","split","pop","propValue","nodeValue","call","scrp","propsObj","hasAttribute","getAttribute","JSON","parse","innerHTML","e","Error","getHabitatSelectorFromClient","scriptTagAttrs","selector","widgetDOMHostElements","ref","inline","clientSpecified","hostNodes","parentNode","push","querySelectorAll","queriedTag","preactRender","widget","hostElements","root","cleanRoot","elm","hostNode","_habitat","preact","render","h","Widget","elements","loaded","clean","addEventListener"],"mappings":"4OAQAA,IAAMC,GAAc,SAAAC,GAClB,MAAOA,GAAIC,QAAQ,aAAc,SAACC,EAAKC,GACrC,MAAOA,GAAOC,iBASZC,EAAoB,WACxB,MACEC,UAASC,eACT,WACEC,GAAIC,GAAUH,SAASI,qBAAqB,SAC5C,OAAOD,GAAQA,EAAQE,OAAS,OAUhCC,EAA0B,SAACC,EAASC,qBACxCN,IAAIO,GAAQF,EAAQG,WAEhBC,EAAQC,OAAOC,UAAWL,EAgC9B,OA7BAI,QAAOE,KAAKL,GAAOM,QAAQ,SAAAC,GACzB,GAAIP,EAAMQ,eAAeD,GAAM,CAC7Bd,GAAIgB,GAAeT,EAAMO,GAAKG,IAC9B,KAAKD,GAAwC,gBAAjBA,GAC1B,OAAO,CAEThB,IAAIkB,GAAWF,EAAaG,MAAM,kBAAkBC,OAAS,EAE7D,IADAF,EAAW3B,EAAY2B,GACnBF,IAAiBE,EAAU,CAC7BlB,GAAIqB,GAAYd,EAAMO,GAAKQ,SAC3Bb,GAAMS,GAAYG,SAMrBR,QAAQU,KAAKlB,EAAQH,qBAAqB,UAAW,SAAAsB,GACtDxB,GAAIyB,KACJ,IAAGD,EAAKE,aAAa,QAAS,CAC5B,GAAkC,eAA9BF,EAAKG,aAAa,QAA2B,MACjD,KACEF,EAAWG,KAAKC,MAAML,EAAKM,WAC3B,MAAMC,GACN,KAAM,IAAIC,OAAMD,GAElBrB,OAAOC,OAAOF,EAAOgB,MAIlBhB,GAGHwB,EAA+B,SAAClC,GACpCC,GAAIkC,GAAiBnC,EAAcS,WAC/B2B,EAAW,IAUf,OARAzB,QAAOE,KAAKsB,GAAgBrB,QAAQ,SAAAC,GAClC,GAAIoB,EAAenB,eAAeD,GAAM,CAEjB,kBADAoB,EAAepB,GAAKG,OAEvCkB,EAAWD,EAAepB,GAAKQ,cAI9Ba,GASHC,EAAwB,SAC5BC,MAAEF,GAAQE,EAAAF,SAAEG,EAAMD,EAAAC,OAAEC,EAAeF,EAAAE,gBAE/BC,KACAzC,EAAgBF,GAEpB,KAAe,IAAXyC,EAAiB,CACnBtC,GAAIyC,GAAa1C,EAAc0C,UAC/BD,GAAUE,KAAKD,GAWjB,OATwB,IAApBF,GAA6BJ,IAE/BA,EAAWF,EAA6BlC,IAEtCoC,MACCtB,QAAQU,KAAKzB,SAAS6C,iBAAiBR,GAAW,SAAAS,GACnDJ,EAAUE,KAAKE,KAGZJ,GAOHK,EAAe,SAACC,EAAQC,EAAcC,EAAMC,EAAW3C,GAC3DyC,EAAalC,QAAQ,SAAAqC,GACnBlD,GAAImD,GAAWD,CACf,KAAIC,EAASC,SAAb,CAGAD,EAASC,UAAW,CACpBpD,IAAIS,GAAQL,EAAwB8C,EAAK5C,IAAiBA,CAI1D,OAHG2C,KACDE,EAASrB,UAAY,IAEhBuB,EAAOC,OAAOD,EAAOE,EAAET,EAAQrC,GAAQ0C,EAAUH,aChI5C,UAAAQ,GAEdxD,GAAI8C,GAASU,CAkCb,QAASF,OA9BI,SACXjB,sDACa,qCACF,iCACD,2CACU,0CAIpBrC,IAAIyD,GAAWrB,GACbD,SAAAA,EACAG,OAAAA,EACAC,gBAAAA,IAEEmB,EAAS,WACX,GAAID,EAAStD,OAAS,EAAG,CACvBH,GAAIyD,GAAWrB,GACbD,SAAAA,EACAG,OAAAA,EACAC,gBAAAA,GAGF,OAAOM,GAAaC,EAAQW,EAxBvB,KAwBuCE,EAAOrD,IAGvDoD,KACA5D,SAAS8D,iBAAiB,mBAAoBF,GAC9C5D,SAAS8D,iBAAiB,OAAQF","file":"preact-habitat.umd.js","sourcesContent":["import preact from \"preact\";\r\n/**\r\n * Removes `-` fron a string and capetalize the letter after\r\n * example: data-props-hello-world =>  dataPropsHelloWorld\r\n * Used for props passed from host DOM element\r\n * @param  {String} str string\r\n * @return {String} Capetalized string\r\n */\r\nconst camelcasize = str => {\r\n  return str.replace(/-([a-z])/gi, (all, letter) => {\r\n    return letter.toUpperCase();\r\n  });\r\n};\r\n\r\n/**\r\n * [getExecutedScript internal widget to provide the currently executed script]\r\n * @param  {document} document [Browser document object]\r\n * @return {HTMLElement}     [script Element]\r\n */\r\nconst getExecutedScript = () => {\r\n  return (\r\n    document.currentScript ||\r\n    (() => {\r\n      let scripts = document.getElementsByTagName(\"script\");\r\n      return scripts[scripts.length - 1];\r\n    })()\r\n  );\r\n};\r\n\r\n/**\r\n * Get the props from a host element's data attributes\r\n * @param  {Element} tag The host element\r\n * @return {Object}  props object to be passed to the component\r\n */\r\nconst collectPropsFromElement = (element, defaultProps = {}) => {\r\n  let attrs = element.attributes;\r\n\r\n  let props = Object.assign({}, defaultProps);\r\n\r\n  // collect from element\r\n  Object.keys(attrs).forEach(key => {\r\n    if (attrs.hasOwnProperty(key)) {\r\n      let dataAttrName = attrs[key].name;\r\n      if (!dataAttrName || typeof dataAttrName !== \"string\") {\r\n        return false;\r\n      }\r\n      let propName = dataAttrName.split(/(data-props?-)/).pop() || '';\r\n      propName = camelcasize(propName);\r\n      if (dataAttrName !== propName) {\r\n        let propValue = attrs[key].nodeValue;\r\n        props[propName] = propValue;\r\n      }\r\n    }\r\n  });\r\n\r\n  // check for child script text/props\r\n  [].forEach.call(element.getElementsByTagName('script'), scrp => {\r\n    let propsObj = {}\r\n    if(scrp.hasAttribute('type')) {\r\n      if (scrp.getAttribute('type') !== 'text/props' ) return;\r\n      try {\r\n        propsObj = JSON.parse(scrp.innerHTML);\r\n      } catch(e) {\r\n        throw new Error(e)\r\n      }\r\n      Object.assign(props, propsObj)\r\n    }\r\n  });  \r\n\r\n  return props;\r\n};\r\n\r\nconst getHabitatSelectorFromClient = (currentScript) => {\r\n  let scriptTagAttrs = currentScript.attributes;\r\n  let selector = null;\r\n  // check for another props attached to the tag\r\n  Object.keys(scriptTagAttrs).forEach(key => {\r\n    if (scriptTagAttrs.hasOwnProperty(key)) {\r\n      const dataAttrName = scriptTagAttrs[key].name;\r\n      if (dataAttrName === 'data-mount-in') {\r\n        selector = scriptTagAttrs[key].nodeValue;\r\n      }\r\n    }\r\n  });\r\n  return selector\r\n}\r\n\r\n/**\r\n * Return array of 0 or more elements that will host our widget\r\n * @param  {id} attrId the data widget id attribute the host should have\r\n * @param  {document} scope  Docuemnt object or DOM Element as a scope\r\n * @return {Array}        Array of matching habitats\r\n */\r\nconst widgetDOMHostElements = (\r\n  { selector, inline, clientSpecified}\r\n) => {\r\n  let hostNodes = [];\r\n  let currentScript = getExecutedScript();\r\n\r\n  if (inline === true) {\r\n    let parentNode = currentScript.parentNode;\r\n    hostNodes.push(parentNode);\r\n  }\r\n  if (clientSpecified === true && !selector) {\r\n    // user did not specify where to mount - get it from script tag attributes\r\n    selector = getHabitatSelectorFromClient(currentScript);\r\n  }\r\n  if (selector) {\r\n    [].forEach.call(document.querySelectorAll(selector), queriedTag => {\r\n      hostNodes.push(queriedTag);\r\n    });\r\n  }\r\n  return hostNodes;\r\n};\r\n\r\n/**\r\n * preact render function that will be queued if the DOM is not ready\r\n * and executed immeidatly if DOM is ready\r\n */\r\nconst preactRender = (widget, hostElements, root, cleanRoot, defaultProps) => {\r\n  hostElements.forEach(elm => {\r\n    let hostNode = elm;\r\n    if (hostNode._habitat) {\r\n      return; \r\n    }\r\n    hostNode._habitat = true;\r\n    let props = collectPropsFromElement(elm, defaultProps) || defaultProps;\r\n    if(cleanRoot) {\r\n      hostNode.innerHTML = \"\";\r\n    }\r\n    return preact.render(preact.h(widget, props), hostNode, root);\r\n  });\r\n};\r\n\r\nexport {\r\n  collectPropsFromElement,\r\n  widgetDOMHostElements,\r\n  getExecutedScript,\r\n  camelcasize,\r\n  preactRender,\r\n  getHabitatSelectorFromClient\r\n};\r\n","import { widgetDOMHostElements, preactRender } from \"./lib\";\r\n\r\nconst habitat = Widget => {\r\n  // Widget represents the Preact component we need to mount\r\n  let widget = Widget;\r\n  // preact root render helper\r\n  let root = null;\r\n\r\n  let render = (\r\n    {\r\n      selector = null,\r\n      inline = false,\r\n      clean = false,\r\n      clientSpecified = false,\r\n      defaultProps = {}\r\n    } = {}\r\n  ) => {\r\n    let elements = widgetDOMHostElements({\r\n      selector,\r\n      inline,\r\n      clientSpecified\r\n    });\r\n    let loaded = () => {\r\n      if (elements.length > 0) {\r\n        let elements = widgetDOMHostElements({\r\n          selector,\r\n          inline,\r\n          clientSpecified\r\n        });\r\n\r\n        return preactRender(widget, elements, root, clean, defaultProps);\r\n      }\r\n    };\r\n    loaded();\r\n    document.addEventListener(\"DOMContentLoaded\", loaded);\r\n    document.addEventListener(\"load\", loaded);\r\n  };\r\n\r\n  return { render };\r\n};\r\n\r\nexport default habitat;\r\n"]}